#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–∞–∑–∞ –∑–Ω–∞–Ω—å –ø—Ä–æ –∞–Ω—ñ–º–µ —Ç–∞ –º–∞–Ω–≥—É
–†–µ–∞–ª—ñ–∑—É—î —ñ—î—Ä–∞—Ä—Ö—ñ—é –∫–ª–∞—Å—ñ–≤ –∑ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º–∏ is_a, part_of, has
"""


class KnowledgeBase:
    def __init__(self):
        # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ—à–µ–Ω—å: {(–æ–±'—î–∫—Ç1, –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è, –æ–±'—î–∫—Ç2)}
        self.facts = set()
        # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤ —Ç–∞ —ó—Ö –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤
        self.classes = {}

    def add_fact(self, subject, relation, obj):
        """–î–æ–¥–∞—Ç–∏ —Ñ–∞–∫—Ç –¥–æ –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
        self.facts.add((subject, relation, obj))

    def add_class(self, class_name, instances=None):
        """–î–æ–¥–∞—Ç–∏ –∫–ª–∞—Å —Ç–∞ –π–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏"""
        if instances is None:
            instances = []
        self.classes[class_name] = instances

    def query_direct(self, subject, obj):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä—è–º–µ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –º—ñ–∂ –æ–±'—î–∫—Ç–∞–º–∏"""
        for s, rel, o in self.facts:
            if s == subject and o == obj:
                return True, rel
        return False, None

    def query_transitive(self, subject, obj, visited=None):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–∏–π –∑–≤'—è–∑–æ–∫ –º—ñ–∂ –æ–±'—î–∫—Ç–∞–º–∏
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ—à—É–∫ –≤ –≥–ª–∏–±–∏–Ω—É (DFS)
        """
        if visited is None:
            visited = set()

        if subject in visited:
            return False, []

        visited.add(subject)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–≤'—è–∑–∫—É
        direct, relation = self.query_direct(subject, obj)
        if direct:
            return True, [(subject, relation, obj)]

        # –ü–æ—à—É–∫ —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–∏—Ö –∑–≤'—è–∑–∫—ñ–≤
        for s, rel, intermediate in self.facts:
            if s == subject:
                found, path = self.query_transitive(intermediate, obj, visited)
                if found:
                    return True, [(subject, rel, intermediate)] + path

        return False, []

    def get_all_relations(self, subject):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–ª—è –æ–±'—î–∫—Ç–∞"""
        relations = []
        for s, rel, o in self.facts:
            if s == subject:
                relations.append((rel, o))
        return relations

    def get_hierarchy(self, obj, relation="is_a", level=0):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—é –¥–ª—è –æ–±'—î–∫—Ç–∞"""
        hierarchy = [(level, obj)]
        for s, rel, o in self.facts:
            if o == obj and rel == relation:
                hierarchy.extend(self.get_hierarchy(s, relation, level + 1))
        return hierarchy

    def print_hierarchy(self, root, relation="is_a"):
        """–ö—Ä–∞—Å–∏–≤–æ –≤–∏–≤–µ—Å—Ç–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—é"""
        hierarchy = self.get_hierarchy(root, relation)
        hierarchy.sort(key=lambda x: x[0])

        print(f"\n{'=' * 60}")
        print(f"–Ü—î—Ä–∞—Ä—Ö—ñ—è '{relation}' –¥–ª—è: {root}")
        print('=' * 60)

        for level, item in hierarchy:
            indent = "  " * level
            if level == 0:
                print(f"{indent}üìå {item}")
            else:
                print(f"{indent}‚îî‚îÄ {item}")

    def remove_fact(self, subject, relation, obj):
        """–í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–∫—Ç –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
        fact = (subject, relation, obj)
        if fact in self.facts:
            self.facts.remove(fact)
            return True, f"‚úÖ –§–∞–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ: {subject} --[{relation}]--> {obj}"
        return False, f"‚ùå –§–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {subject} --[{relation}]--> {obj}"

    def add_fact_interactive(self, subject, relation, obj):
        """–î–æ–¥–∞—Ç–∏ —Ñ–∞–∫—Ç —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é"""
        if (subject, relation, obj) in self.facts:
            return False, f"‚ö†Ô∏è –§–∞–∫—Ç –≤–∂–µ —ñ—Å–Ω—É—î: {subject} --[{relation}]--> {obj}"

        self.facts.add((subject, relation, obj))
        return True, f"‚úÖ –§–∞–∫—Ç –¥–æ–¥–∞–Ω–æ: {subject} --[{relation}]--> {obj}"

    def list_all_entities(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π"""
        entities = set()
        for s, _, o in self.facts:
            entities.add(s)
            entities.add(o)
        return sorted(entities)

    def list_all_relations(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –≤—ñ–¥–Ω–æ—à–µ–Ω—å"""
        relations = set()
        for _, rel, _ in self.facts:
            relations.add(rel)
        return sorted(relations)

    def find_by_relation(self, relation):
        """–ó–Ω–∞–π—Ç–∏ –≤—Å—ñ —Ñ–∞–∫—Ç–∏ –∑ –ø–µ–≤–Ω–∏–º —Ç–∏–ø–æ–º –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è"""
        results = []
        for s, rel, o in self.facts:
            if rel == relation:
                results.append((s, o))
        return results

    def export_facts(self, filename="kb_export.txt"):
        """–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –±–∞–∑—É –∑–Ω–∞–Ω—å —É —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                for s, rel, o in sorted(self.facts):
                    f.write(f"{s},{rel},{o}\n")
            return True, f"‚úÖ –ë–∞–∑–∞ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞ –≤ {filename}"
        except Exception as e:
            return False, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}"

    def import_facts(self, filename="kb_export.txt"):
        """–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –±–∞–∑—É –∑–Ω–∞–Ω—å –∑ —Ñ–∞–π–ª—É"""
        try:
            count = 0
            with open(filename, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        parts = line.split(',')
                        if len(parts) == 3:
                            self.facts.add((parts[0], parts[1], parts[2]))
                            count += 1
            return True, f"‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {count} —Ñ–∞–∫—Ç—ñ–≤ –∑ {filename}"
        except Exception as e:
            return False, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}"


# ============================================================
# –ü–û–í–ù–ê –ó–ê–ú–Ü–ù–ê create_anime_knowledge_base()
# –ü—Ä–µ–¥–º–µ—Ç–Ω–∞ –æ–±–ª–∞—Å—Ç—å: –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø –ó–ë–†–û–á
# 4 —Ä—ñ–≤–Ω—ñ —ñ—î—Ä–∞—Ä—Ö—ñ—ó is_a + –¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—ñ –∑–≤'—è–∑–∫–∏ part_of/has
# ============================================================

def create_knowledge_base():
    """
    –ë–∞–∑–∞ –∑–Ω–∞–Ω—å: –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø –ó–ë–†–û–á
    4 —Ä—ñ–≤–Ω—ñ —ñ—î—Ä–∞—Ä—Ö—ñ—ó is_a
    –î–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—ñ –∑–≤'—è–∑–∫–∏: part_of ‚Üî has
    """
    kb = KnowledgeBase()

    # ============================================================
    # –Ü–Ñ–†–ê–†–•–Ü–Ø IS_A - –†–Ü–í–ù–û 4 –†–Ü–í–ù–Ü
    # ============================================================

    # –†–Ü–í–ï–ù–¨ 1: –ù–∞–π–≤–∏—â–∏–π - –ó–±—Ä–æ—è
    kb.add_fact("Weapon", "is_a", "Item")

    # –†–Ü–í–ï–ù–¨ 2: –û—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ —Ç–∏–ø–æ–º –±–æ—é
    kb.add_fact("MeleeWeapon", "is_a", "Weapon")
    kb.add_fact("RangedWeapon", "is_a", "Weapon")
    kb.add_fact("ExplosiveWeapon", "is_a", "Weapon")

    # –†–Ü–í–ï–ù–¨ 3: –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    # –•–æ–ª–æ–¥–Ω–∞ –∑–±—Ä–æ—è
    kb.add_fact("Sword", "is_a", "MeleeWeapon")
    kb.add_fact("Axe", "is_a", "MeleeWeapon")
    kb.add_fact("Spear", "is_a", "MeleeWeapon")
    kb.add_fact("Dagger", "is_a", "MeleeWeapon")
    kb.add_fact("Mace", "is_a", "MeleeWeapon")
    kb.add_fact("Staff", "is_a", "MeleeWeapon")

    # –î–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–∞ –∑–±—Ä–æ—è
    kb.add_fact("Bow", "is_a", "RangedWeapon")
    kb.add_fact("Crossbow", "is_a", "RangedWeapon")
    kb.add_fact("Firearm", "is_a", "RangedWeapon")
    kb.add_fact("Throwable", "is_a", "RangedWeapon")

    # –í–∏–±—É—Ö—ñ–≤–∫–∞
    kb.add_fact("Grenade", "is_a", "ExplosiveWeapon")
    kb.add_fact("Mine", "is_a", "ExplosiveWeapon")
    kb.add_fact("Bomb", "is_a", "ExplosiveWeapon")

    # –†–Ü–í–ï–ù–¨ 4: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –≤–∏–¥–∏
    # –ú–µ—á—ñ
    kb.add_fact("Longsword", "is_a", "Sword")
    kb.add_fact("Katana", "is_a", "Sword")
    kb.add_fact("Rapier", "is_a", "Sword")
    kb.add_fact("Scimitar", "is_a", "Sword")
    kb.add_fact("Claymore", "is_a", "Sword")
    kb.add_fact("Shortsword", "is_a", "Sword")

    # –°–æ–∫–∏—Ä–∏
    kb.add_fact("BattleAxe", "is_a", "Axe")
    kb.add_fact("Hatchet", "is_a", "Axe")
    kb.add_fact("Tomahawk", "is_a", "Axe")
    kb.add_fact("Halberd", "is_a", "Axe")

    # –°–ø–∏—Å–∏
    kb.add_fact("Pike", "is_a", "Spear")
    kb.add_fact("Javelin", "is_a", "Spear")
    kb.add_fact("Lance", "is_a", "Spear")
    kb.add_fact("Trident", "is_a", "Spear")

    # –ö–∏–Ω–¥–∂–∞–ª–∏
    kb.add_fact("Stiletto", "is_a", "Dagger")
    kb.add_fact("Dirk", "is_a", "Dagger")
    kb.add_fact("Tanto", "is_a", "Dagger")

    # –õ—É–∫–∏
    kb.add_fact("Longbow", "is_a", "Bow")
    kb.add_fact("Shortbow", "is_a", "Bow")
    kb.add_fact("CompositeBow", "is_a", "Bow")
    kb.add_fact("Recurve", "is_a", "Bow")

    # –í–æ–≥–Ω–µ–ø–∞–ª—å–Ω–∞ –∑–±—Ä–æ—è
    kb.add_fact("Pistol", "is_a", "Firearm")
    kb.add_fact("Rifle", "is_a", "Firearm")
    kb.add_fact("Shotgun", "is_a", "Firearm")
    kb.add_fact("MachineGun", "is_a", "Firearm")

    # –ú–µ—Ç–∞–ª—å–Ω–∞ –∑–±—Ä–æ—è
    kb.add_fact("Shuriken", "is_a", "Throwable")
    kb.add_fact("ThrowingKnife", "is_a", "Throwable")
    kb.add_fact("Boomerang", "is_a", "Throwable")
    kb.add_fact("Chakram", "is_a", "Throwable")

    # ============================================================
    # –ö–û–ú–ü–û–ù–ï–ù–¢–ò –ó–ë–†–û–á (–¥–ª—è –∑–≤'—è–∑–∫—ñ–≤ part_of/has)
    # ============================================================

    # –ë–∞–∑–æ–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("Component", "is_a", "Item")
    kb.add_fact("Blade", "is_a", "Component")
    kb.add_fact("Handle", "is_a", "Component")
    kb.add_fact("Guard", "is_a", "Component")
    kb.add_fact("Pommel", "is_a", "Component")
    kb.add_fact("String", "is_a", "Component")
    kb.add_fact("Trigger", "is_a", "Component")
    kb.add_fact("Barrel", "is_a", "Component")
    kb.add_fact("Sight", "is_a", "Component")
    kb.add_fact("Magazine", "is_a", "Component")

    # –¢–∏–ø–∏ –ª–µ–∑
    kb.add_fact("StraightBlade", "is_a", "Blade")
    kb.add_fact("CurvedBlade", "is_a", "Blade")
    kb.add_fact("SerratedBlade", "is_a", "Blade")

    # –¢–∏–ø–∏ —Ä—É–∫–æ—è—Ç–æ–∫
    kb.add_fact("WoodenHandle", "is_a", "Handle")
    kb.add_fact("MetalHandle", "is_a", "Handle")
    kb.add_fact("LeatherHandle", "is_a", "Handle")

    # ============================================================
    # –î–í–û–°–¢–û–†–û–ù–ù–Ü –ó–í'–Ø–ó–ö–ò: –ú–ï–ß–Ü –¢–ê –á–• –ö–û–ú–ü–û–ù–ï–ù–¢–ò
    # ============================================================

    # Longsword –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("StraightBlade", "part_of", "Longsword")
    kb.add_fact("Longsword", "has", "StraightBlade")

    kb.add_fact("MetalHandle", "part_of", "Longsword")
    kb.add_fact("Longsword", "has", "MetalHandle")

    kb.add_fact("Guard", "part_of", "Longsword")
    kb.add_fact("Longsword", "has", "Guard")

    kb.add_fact("Pommel", "part_of", "Longsword")
    kb.add_fact("Longsword", "has", "Pommel")

    # Katana –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("CurvedBlade", "part_of", "Katana")
    kb.add_fact("Katana", "has", "CurvedBlade")

    kb.add_fact("WoodenHandle", "part_of", "Katana")
    kb.add_fact("Katana", "has", "WoodenHandle")

    kb.add_fact("Guard", "part_of", "Katana")
    kb.add_fact("Katana", "has", "Guard")

    # Rapier –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("StraightBlade", "part_of", "Rapier")
    kb.add_fact("Rapier", "has", "StraightBlade")

    kb.add_fact("MetalHandle", "part_of", "Rapier")
    kb.add_fact("Rapier", "has", "MetalHandle")

    kb.add_fact("Guard", "part_of", "Rapier")
    kb.add_fact("Rapier", "has", "Guard")

    # Scimitar –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("CurvedBlade", "part_of", "Scimitar")
    kb.add_fact("Scimitar", "has", "CurvedBlade")

    kb.add_fact("MetalHandle", "part_of", "Scimitar")
    kb.add_fact("Scimitar", "has", "MetalHandle")

    # Dagger –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("StraightBlade", "part_of", "Stiletto")
    kb.add_fact("Stiletto", "has", "StraightBlade")

    kb.add_fact("MetalHandle", "part_of", "Stiletto")
    kb.add_fact("Stiletto", "has", "MetalHandle")

    # ============================================================
    # –î–í–û–°–¢–û–†–û–ù–ù–Ü –ó–í'–Ø–ó–ö–ò: –õ–£–ö–ò –¢–ê –á–• –ö–û–ú–ü–û–ù–ï–ù–¢–ò
    # ============================================================

    # Longbow
    kb.add_fact("String", "part_of", "Longbow")
    kb.add_fact("Longbow", "has", "String")

    kb.add_fact("WoodenHandle", "part_of", "Longbow")
    kb.add_fact("Longbow", "has", "WoodenHandle")

    # Crossbow
    kb.add_fact("String", "part_of", "Crossbow")
    kb.add_fact("Crossbow", "has", "String")

    kb.add_fact("Trigger", "part_of", "Crossbow")
    kb.add_fact("Crossbow", "has", "Trigger")

    kb.add_fact("WoodenHandle", "part_of", "Crossbow")
    kb.add_fact("Crossbow", "has", "WoodenHandle")

    # ============================================================
    # –î–í–û–°–¢–û–†–û–ù–ù–Ü –ó–í'–Ø–ó–ö–ò: –í–û–ì–ù–ï–ü–ê–õ–¨–ù–ê –ó–ë–†–û–Ø
    # ============================================================

    # Pistol
    kb.add_fact("Barrel", "part_of", "Pistol")
    kb.add_fact("Pistol", "has", "Barrel")

    kb.add_fact("Trigger", "part_of", "Pistol")
    kb.add_fact("Pistol", "has", "Trigger")

    kb.add_fact("MetalHandle", "part_of", "Pistol")
    kb.add_fact("Pistol", "has", "MetalHandle")

    kb.add_fact("Magazine", "part_of", "Pistol")
    kb.add_fact("Pistol", "has", "Magazine")

    # Rifle
    kb.add_fact("Barrel", "part_of", "Rifle")
    kb.add_fact("Rifle", "has", "Barrel")

    kb.add_fact("Trigger", "part_of", "Rifle")
    kb.add_fact("Rifle", "has", "Trigger")

    kb.add_fact("WoodenHandle", "part_of", "Rifle")
    kb.add_fact("Rifle", "has", "WoodenHandle")

    kb.add_fact("Sight", "part_of", "Rifle")
    kb.add_fact("Rifle", "has", "Sight")

    kb.add_fact("Magazine", "part_of", "Rifle")
    kb.add_fact("Rifle", "has", "Magazine")

    # Shotgun
    kb.add_fact("Barrel", "part_of", "Shotgun")
    kb.add_fact("Shotgun", "has", "Barrel")

    kb.add_fact("Trigger", "part_of", "Shotgun")
    kb.add_fact("Shotgun", "has", "Trigger")

    kb.add_fact("WoodenHandle", "part_of", "Shotgun")
    kb.add_fact("Shotgun", "has", "WoodenHandle")

    # ============================================================
    # –ú–ê–¢–ï–†–Ü–ê–õ–ò
    # ============================================================

    kb.add_fact("Material", "is_a", "Item")
    kb.add_fact("Metal", "is_a", "Material")
    kb.add_fact("Wood", "is_a", "Material")
    kb.add_fact("Leather", "is_a", "Material")
    kb.add_fact("Plastic", "is_a", "Material")

    # –¢–∏–ø–∏ –º–µ—Ç–∞–ª—ñ–≤
    kb.add_fact("Steel", "is_a", "Metal")
    kb.add_fact("Iron", "is_a", "Metal")
    kb.add_fact("Bronze", "is_a", "Metal")
    kb.add_fact("Silver", "is_a", "Metal")

    # –¢–∏–ø–∏ –¥–µ—Ä–µ–≤–∞
    kb.add_fact("Oak", "is_a", "Wood")
    kb.add_fact("Ash", "is_a", "Wood")
    kb.add_fact("Yew", "is_a", "Wood")

    # ============================================================
    # –î–í–û–°–¢–û–†–û–ù–ù–Ü –ó–í'–Ø–ó–ö–ò: –ö–û–ú–ü–û–ù–ï–ù–¢–ò –¢–ê –ú–ê–¢–ï–†–Ü–ê–õ–ò
    # ============================================================

    # StraightBlade –∑—Ä–æ–±–ª–µ–Ω–æ –∑—ñ —Å—Ç–∞–ª—ñ
    kb.add_fact("Steel", "part_of", "StraightBlade")
    kb.add_fact("StraightBlade", "has", "Steel")

    # CurvedBlade –∑—ñ —Å—Ç–∞–ª—ñ
    kb.add_fact("Steel", "part_of", "CurvedBlade")
    kb.add_fact("CurvedBlade", "has", "Steel")

    # MetalHandle –∑ –∑–∞–ª—ñ–∑–∞
    kb.add_fact("Iron", "part_of", "MetalHandle")
    kb.add_fact("MetalHandle", "has", "Iron")

    # WoodenHandle –∑ –¥—É–±–∞
    kb.add_fact("Oak", "part_of", "WoodenHandle")
    kb.add_fact("WoodenHandle", "has", "Oak")

    # LeatherHandle –∑—ñ —à–∫—ñ—Ä–∏
    kb.add_fact("Leather", "part_of", "LeatherHandle")
    kb.add_fact("LeatherHandle", "has", "Leather")

    # Barrel –∑—ñ —Å—Ç–∞–ª—ñ
    kb.add_fact("Steel", "part_of", "Barrel")
    kb.add_fact("Barrel", "has", "Steel")

    # String (—Ç—è—Ç–∏–≤–∞)
    kb.add_fact("Leather", "part_of", "String")
    kb.add_fact("String", "has", "Leather")

    # ============================================================
    # –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ó–ë–†–û–á
    # ============================================================

    kb.add_fact("Property", "is_a", "Item")
    kb.add_fact("Weight", "is_a", "Property")
    kb.add_fact("Length", "is_a", "Property")
    kb.add_fact("Damage", "is_a", "Property")
    kb.add_fact("Range", "is_a", "Property")
    kb.add_fact("Speed", "is_a", "Property")

    # –ó–Ω–∞—á–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    kb.add_fact("Heavy", "is_a", "Weight")
    kb.add_fact("Light", "is_a", "Weight")
    kb.add_fact("Medium", "is_a", "Weight")

    kb.add_fact("Long", "is_a", "Length")
    kb.add_fact("Short", "is_a", "Length")

    kb.add_fact("HighDamage", "is_a", "Damage")
    kb.add_fact("MediumDamage", "is_a", "Damage")
    kb.add_fact("LowDamage", "is_a", "Damage")

    kb.add_fact("LongRange", "is_a", "Range")
    kb.add_fact("ShortRange", "is_a", "Range")

    kb.add_fact("Fast", "is_a", "Speed")
    kb.add_fact("Slow", "is_a", "Speed")

    # ============================================================
    # –î–í–û–°–¢–û–†–û–ù–ù–Ü –ó–í'–Ø–ó–ö–ò: –ó–ë–†–û–Ø –¢–ê –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
    # ============================================================

    # Longsword
    kb.add_fact("Longsword", "has", "Heavy")
    kb.add_fact("Longsword", "has", "Long")
    kb.add_fact("Longsword", "has", "HighDamage")
    kb.add_fact("Longsword", "has", "Slow")

    # Katana
    kb.add_fact("Katana", "has", "Medium")
    kb.add_fact("Katana", "has", "Long")
    kb.add_fact("Katana", "has", "HighDamage")
    kb.add_fact("Katana", "has", "Fast")

    # Rapier
    kb.add_fact("Rapier", "has", "Light")
    kb.add_fact("Rapier", "has", "Long")
    kb.add_fact("Rapier", "has", "MediumDamage")
    kb.add_fact("Rapier", "has", "Fast")

    # Stiletto
    kb.add_fact("Stiletto", "has", "Light")
    kb.add_fact("Stiletto", "has", "Short")
    kb.add_fact("Stiletto", "has", "MediumDamage")
    kb.add_fact("Stiletto", "has", "Fast")

    # BattleAxe
    kb.add_fact("BattleAxe", "has", "Heavy")
    kb.add_fact("BattleAxe", "has", "Long")
    kb.add_fact("BattleAxe", "has", "HighDamage")
    kb.add_fact("BattleAxe", "has", "Slow")

    # Longbow
    kb.add_fact("Longbow", "has", "Medium")
    kb.add_fact("Longbow", "has", "Long")
    kb.add_fact("Longbow", "has", "MediumDamage")
    kb.add_fact("Longbow", "has", "LongRange")

    # Pistol
    kb.add_fact("Pistol", "has", "Light")
    kb.add_fact("Pistol", "has", "Short")
    kb.add_fact("Pistol", "has", "MediumDamage")
    kb.add_fact("Pistol", "has", "ShortRange")
    kb.add_fact("Pistol", "has", "Fast")

    # Rifle
    kb.add_fact("Rifle", "has", "Medium")
    kb.add_fact("Rifle", "has", "Long")
    kb.add_fact("Rifle", "has", "HighDamage")
    kb.add_fact("Rifle", "has", "LongRange")

    # ============================================================
    # –Ü–°–¢–û–†–ò–ß–ù–Ü –ü–ï–†–Ü–û–î–ò (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É)
    # ============================================================

    kb.add_fact("Period", "is_a", "Item")
    kb.add_fact("Medieval", "is_a", "Period")
    kb.add_fact("Renaissance", "is_a", "Period")
    kb.add_fact("Feudal", "is_a", "Period")
    kb.add_fact("Modern", "is_a", "Period")

    # –ó–±—Ä–æ—è –º–∞—î —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
    kb.add_fact("Longsword", "has", "Medieval")
    kb.add_fact("Claymore", "has", "Medieval")
    kb.add_fact("BattleAxe", "has", "Medieval")

    kb.add_fact("Rapier", "has", "Renaissance")

    kb.add_fact("Katana", "has", "Feudal")
    kb.add_fact("Tanto", "has", "Feudal")

    kb.add_fact("Pistol", "has", "Modern")
    kb.add_fact("Rifle", "has", "Modern")
    kb.add_fact("Shotgun", "has", "Modern")

    # ============================================================
    # –°–¢–ò–õ–Ü –ë–û–Æ
    # ============================================================

    kb.add_fact("CombatStyle", "is_a", "Item")
    kb.add_fact("Dueling", "is_a", "CombatStyle")
    kb.add_fact("HeavyStrike", "is_a", "CombatStyle")
    kb.add_fact("QuickAttack", "is_a", "CombatStyle")
    kb.add_fact("Archery", "is_a", "CombatStyle")
    kb.add_fact("Tactical", "is_a", "CombatStyle")

    # –ó–±—Ä–æ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ–≤–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤
    kb.add_fact("Rapier", "has", "Dueling")
    kb.add_fact("Longsword", "has", "HeavyStrike")
    kb.add_fact("Katana", "has", "QuickAttack")
    kb.add_fact("Stiletto", "has", "QuickAttack")
    kb.add_fact("Longbow", "has", "Archery")
    kb.add_fact("Rifle", "has", "Tactical")

    # ============================================================
    # –ü–ï–†–ï–•–†–ï–°–ù–Ü –ó–í'–Ø–ó–ö–ò (—â–æ–± —Ä—ñ–∑–Ω—ñ –≤–∏–¥–∏ –∑–±—Ä–æ—ó –±—É–ª–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ)
    # ============================================================

    # –ó–±—Ä–æ—è –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    # Guard –ø–æ–≤'—è–∑—É—î –º–µ—á—ñ
    kb.add_fact("Guard", "part_of", "Sword")
    kb.add_fact("Sword", "has", "Guard")

    # Trigger –ø–æ–≤'—è–∑—É—î –≤–æ–≥–Ω–µ–ø–∞–ª—å–Ω—É –∑–±—Ä–æ—é —Ç–∞ –∞—Ä–±–∞–ª–µ—Ç
    kb.add_fact("Trigger", "part_of", "Firearm")
    kb.add_fact("Firearm", "has", "Trigger")

    # String –ø–æ–≤'—è–∑—É—î –ª—É–∫–∏
    kb.add_fact("String", "part_of", "Bow")
    kb.add_fact("Bow", "has", "String")

    # Steel - —Å–ø—ñ–ª—å–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö –∫–ª–∏–Ω–∫—ñ–≤
    kb.add_fact("Steel", "part_of", "Blade")
    kb.add_fact("Blade", "has", "Steel")

    return kb


def interactive_query(kb):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–±—Ä–æ—ó"""
    print("\n" + "=" * 60)
    print("üî´ –ë–ê–ó–ê –ó–ù–ê–ù–¨: –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø –ó–ë–†–û–á üî´")
    print("=" * 60)
    print("\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
    print("  1. query <–æ–±'—î–∫—Ç1> <–æ–±'—î–∫—Ç2> - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–≤'—è–∑–æ–∫")
    print("  2. relations <–æ–±'—î–∫—Ç> - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–≤'—è–∑–∫–∏ –æ–±'—î–∫—Ç–∞")
    print("  3. hierarchy <–æ–±'—î–∫—Ç> [–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è] - –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—é")
    print("  4. add <—Å—É–±'—î–∫—Ç> <–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è> <–æ–±'—î–∫—Ç> - –¥–æ–¥–∞—Ç–∏ —Ñ–∞–∫—Ç")
    print("  5. remove <—Å—É–±'—î–∫—Ç> <–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è> <–æ–±'—î–∫—Ç> - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–∫—Ç")
    print("  6. list entities - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ")
    print("  7. list relations - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–∏–ø–∏ –≤—ñ–¥–Ω–æ—à–µ–Ω—å")
    print("  8. find <–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è> - –∑–Ω–∞–π—Ç–∏ –≤—Å—ñ —Ñ–∞–∫—Ç–∏ –∑ —Ü–∏–º –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º")
    print("  9. export [—Ñ–∞–π–ª] - –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –±–∞–∑—É –≤ —Ñ–∞–π–ª")
    print(" 10. import [—Ñ–∞–π–ª] - —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –±–∞–∑—É –∑ —Ñ–∞–π–ª—É")
    print(" 11. examples - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤")
    print(" 12. stats - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑–∏")
    print(" 13. exit - –≤–∏—Ö—ñ–¥")
    print("=" * 60)

    while True:
        try:
            user_input = input("\nüí¨ –ó–∞–ø–∏—Ç: ").strip()

            if not user_input:
                continue

            parts = user_input.split()
            command = parts[0].lower()

            if command == "exit":
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break

            elif command == "query" and len(parts) >= 3:
                obj1, obj2 = parts[1], parts[2]
                found, path = kb.query_transitive(obj1, obj2)

                if found:
                    print(f"\n‚úÖ –¢–ê–ö! '{obj1}' –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ '{obj2}'")
                    print(f"\nüîó –®–ª—è—Ö –∑–≤'—è–∑–∫—É:")
                    for i, (s, rel, o) in enumerate(path, 1):
                        print(f"   {i}. {s} --[{rel}]--> {o}")
                else:
                    print(f"\n‚ùå –ù–Ü. '{obj1}' –ù–ï –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ '{obj2}'")

            elif command == "relations" and len(parts) >= 2:
                obj = parts[1]
                relations = kb.get_all_relations(obj)

                if relations:
                    print(f"\nüìã –í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–ª—è '{obj}':")
                    for rel, target in relations:
                        print(f"   ‚Ä¢ {obj} --[{rel}]--> {target}")
                else:
                    print(f"\n‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–Ω–æ—à–µ–Ω—å –¥–ª—è '{obj}'")

            elif command == "hierarchy" and len(parts) >= 2:
                obj = parts[1]
                relation = parts[2] if len(parts) >= 3 else "is_a"
                kb.print_hierarchy(obj, relation)

            elif command == "add" and len(parts) >= 4:
                subject, relation, obj = parts[1], parts[2], parts[3]
                success, message = kb.add_fact_interactive(subject, relation, obj)
                print(f"\n{message}")

            elif command == "remove" and len(parts) >= 4:
                subject, relation, obj = parts[1], parts[2], parts[3]
                success, message = kb.remove_fact(subject, relation, obj)
                print(f"\n{message}")

            elif command == "list" and len(parts) >= 2:
                subcommand = parts[1].lower()

                if subcommand == "entities":
                    entities = kb.list_all_entities()
                    print(f"\nüì¶ –í—Å—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ –≤ –±–∞–∑—ñ ({len(entities)}):")
                    print("=" * 60)

                    # –ì—Ä—É–ø—É—î–º–æ –ø–æ 4 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ
                    for i in range(0, len(entities), 4):
                        row = entities[i:i + 4]
                        print("  ".join(f"{ent:20}" for ent in row))

                elif subcommand == "relations":
                    relations = kb.list_all_relations()
                    print(f"\nüîó –¢–∏–ø–∏ –≤—ñ–¥–Ω–æ—à–µ–Ω—å ({len(relations)}):")
                    for rel in relations:
                        count = len(kb.find_by_relation(rel))
                        print(f"   ‚Ä¢ {rel}: {count} —Ñ–∞–∫—Ç—ñ–≤")
                else:
                    print("\n‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø—ñ–¥–∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: list entities –∞–±–æ list relations")

            elif command == "find" and len(parts) >= 2:
                relation = parts[1]
                results = kb.find_by_relation(relation)

                if results:
                    print(f"\nüîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ñ–∞–∫—Ç—ñ–≤ –∑ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º '{relation}':")
                    for s, o in results:
                        print(f"   ‚Ä¢ {s} --[{relation}]--> {o}")
                else:
                    print(f"\n‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–∫—Ç—ñ–≤ –∑ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º '{relation}'")

            elif command == "export":
                filename = parts[1] if len(parts) >= 2 else "kb_export.txt"
                success, message = kb.export_facts(filename)
                print(f"\n{message}")

            elif command == "import":
                filename = parts[1] if len(parts) >= 2 else "kb_export.txt"
                success, message = kb.import_facts(filename)
                print(f"\n{message}")

            elif command == "examples":
                print("\n" + "=" * 60)
                print("üìö –ü–†–ò–ö–õ–ê–î–ò –ó–ê–ü–ò–¢–Ü–í –î–õ–Ø –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–á –ó–ë–†–û–á")
                print("=" * 60)
                print("\nüîç –ë–∞–∑–æ–≤—ñ –∑–∞–ø–∏—Ç–∏:")
                print("  query Longsword Weapon")
                print("  query Pistol Firearm")
                print("  query Steel Metal")
                print("\nüîß –ó–∞–ø–∏—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:")
                print("  query StraightBlade Longsword")
                print("  query Trigger Pistol")
                print("  query Barrel Rifle")
                print("\n‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤:")
                print("  add NewSword is_a Sword")
                print("  add Katana has Sharpness")
                print("  add Blade part_of NewSword")
                print("\n‚ûñ –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤:")
                print("  remove Katana has Sharpness")
                print("\nüìã –ü–µ—Ä–µ–≥–ª—è–¥ –¥–∞–Ω–∏—Ö:")
                print("  relations Longsword")
                print("  list entities")
                print("  list relations")
                print("  find has")
                print("  find part_of")
                print("\nüå≥ –Ü—î—Ä–∞—Ä—Ö—ñ—ó:")
                print("  hierarchy Weapon")
                print("  hierarchy Sword")
                print("  hierarchy Component")
                print("\nüíæ –ï–∫—Å–ø–æ—Ä—Ç/–Ü–º–ø–æ—Ä—Ç:")
                print("  export weapon_kb.txt")
                print("  import weapon_kb.txt")

            elif command == "stats":
                print("\n" + "=" * 60)
                print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–ò –ó–ù–ê–ù–¨ –ü–†–û –ó–ë–†–û–Æ")
                print("=" * 60)
                print(f"–í—Å—å–æ–≥–æ —Ñ–∞–∫—Ç—ñ–≤: {len(kb.facts)}")
                print(f"–í—Å—å–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π: {len(kb.list_all_entities())}")

                relations_count = {}
                for _, rel, _ in kb.facts:
                    relations_count[rel] = relations_count.get(rel, 0) + 1

                print(f"\nüîó –†–æ–∑–ø–æ–¥—ñ–ª –≤—ñ–¥–Ω–æ—à–µ–Ω—å:")
                for rel, count in sorted(relations_count.items(), key=lambda x: x[1], reverse=True):
                    bar = "‚ñà" * (count // 5)
                    print(f"  {rel:15} | {bar} {count}")

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∑–±—Ä–æ—ó
                weapon_count = len([s for s, rel, o in kb.facts if
                                    rel == "is_a" and o in ["Weapon", "MeleeWeapon", "RangedWeapon",
                                                            "ExplosiveWeapon"]])
                component_count = len([s for s, rel, o in kb.facts if
                                       rel == "is_a" and o in ["Component", "Blade", "Handle", "Guard"]])
                material_count = len([s for s, rel, o in kb.facts if
                                      rel == "is_a" and o in ["Material", "Metal", "Wood", "Leather"]])

                print(f"\nüî´ –¢–∏–ø–∏ –∑–±—Ä–æ—ó: ~{weapon_count}")
                print(f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏: ~{component_count}")
                print(f"üèóÔ∏è –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏: ~{material_count}")

                # –ü–æ–ø—É–ª—è—Ä–Ω—ñ –≤–∏–¥–∏ –∑–±—Ä–æ—ó
                sword_count = len([s for s, rel, o in kb.facts if rel == "is_a" and o == "Sword"])
                firearm_count = len([s for s, rel, o in kb.facts if rel == "is_a" and o == "Firearm"])
                bow_count = len([s for s, rel, o in kb.facts if rel == "is_a" and o == "Bow"])

                print(f"\nüó°Ô∏è –ú–µ—á—ñ–≤: {sword_count} –≤–∏–¥—ñ–≤")
                print(f"üî´ –í–æ–≥–Ω–µ–ø–∞–ª—å–Ω–æ—ó –∑–±—Ä–æ—ó: {firearm_count} –≤–∏–¥—ñ–≤")
                print(f"üèπ –õ—É–∫: {bow_count} –≤–∏–¥—ñ–≤")

            else:
                print("\n‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å 'examples' –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤")

        except KeyboardInterrupt:
            print("\n\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω—É –±–∞–∑—É –∑–Ω–∞–Ω—å
    kb = create_knowledge_base()

    # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    interactive_query(kb)