#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–∞–∑–∞ –∑–Ω–∞–Ω—å –ø—Ä–æ –∞–Ω—ñ–º–µ —Ç–∞ –º–∞–Ω–≥—É
–†–µ–∞–ª—ñ–∑—É—î —ñ—î—Ä–∞—Ä—Ö—ñ—é –∫–ª–∞—Å—ñ–≤ –∑ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º–∏ is_a, part_of, has
"""
from Vertex import *

class OptimizedKnowledgeBase:
    """–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≥—Ä–∞—Ñ–∞"""

    def __init__(self):
        self.vertices = {}  # —Å–ª–æ–≤–Ω–∏–∫ –≤–µ—Ä—à–∏–Ω: name -> Vertex
        self.relation_types = set()

    def get_or_create_vertex(self, name):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–µ—Ä—à–∏–Ω—É –∑–∞ —ñ–º'—è–º –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É"""
        if name not in self.vertices:
            self.vertices[name] = Vertex(name)
        return self.vertices[name]

    def add_fact(self, subject, relation, obj):
        """–î–æ–¥–∞—Ç–∏ —Ñ–∞–∫—Ç –¥–æ –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
        subject_vertex = self.get_or_create_vertex(subject)
        obj_vertex = self.get_or_create_vertex(obj)

        subject_vertex.add_edge(relation, obj_vertex)
        self.relation_types.add(relation)

        return True, f"‚úÖ –î–æ–¥–∞–Ω–æ: {subject} --[{relation}]--> {obj}"

    def query_direct(self, subject, obj, relation=None):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä—è–º–µ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –º—ñ–∂ –æ–±'—î–∫—Ç–∞–º–∏"""
        if subject not in self.vertices or obj not in self.vertices:
            return False, None

        subject_vertex = self.vertices[subject]
        return subject_vertex.has_direct_connection(obj, relation)

    def query_transitive(self, subject, obj, relation_filter=None, visited=None):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–∏–π –∑–≤'—è–∑–æ–∫ –º—ñ–∂ –æ–±'—î–∫—Ç–∞–º–∏
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î BFS –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—à—É–∫—É
        """
        if subject not in self.vertices or obj not in self.vertices:
            return False, []

        if visited is None:
            visited = set()

        # BFS –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —à–ª—è—Ö—É
        queue = [(self.vertices[subject], [])]  # (current_vertex, path)
        visited.add(subject)

        while queue:
            current_vertex, path = queue.pop(0)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ —Ä–µ–±—Ä–∞ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏
            for edge in current_vertex.edges:
                # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
                if relation_filter and edge.relation != relation_filter:
                    continue

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–Ω–∞–π—à–ª–∏ —Ü—ñ–ª—å
                if edge.target.name == obj:
                    full_path = path + [(current_vertex.name, edge.relation, edge.target.name)]
                    return True, full_path

                # –î–æ–¥–∞—î–º–æ —Å—É—Å—ñ–¥–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏ –≤ —á–µ—Ä–≥—É
                if edge.target.name not in visited:
                    visited.add(edge.target.name)
                    new_path = path + [(current_vertex.name, edge.relation, edge.target.name)]
                    queue.append((edge.target, new_path))

        return False, []

    def get_all_relations(self, subject):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–ª—è –æ–±'—î–∫—Ç–∞"""
        if subject not in self.vertices:
            return []

        relations = []
        for edge in self.vertices[subject].edges:
            relations.append((edge.relation, edge.target.name))
        return relations

    def get_hierarchy(self, root_name, relation="is_a"):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—é –¥–ª—è –æ–±'—î–∫—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é BFS"""
        if root_name not in self.vertices:
            return []

        hierarchy = []
        queue = [(self.vertices[root_name], 0)]  # (vertex, level)
        visited = set([root_name])

        while queue:
            current_vertex, level = queue.pop(0)
            hierarchy.append((level, current_vertex.name))

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ—Ö –Ω–∞—â–∞–¥–∫—ñ–≤ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º
            for edge in current_vertex.edges:
                if edge.relation == relation and edge.target.name not in visited:
                    visited.add(edge.target.name)
                    queue.append((edge.target, level + 1))

        return hierarchy

    def print_hierarchy(self, root, relation="is_a"):
        """–ö—Ä–∞—Å–∏–≤–æ –≤–∏–≤–µ—Å—Ç–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—é"""
        hierarchy = self.get_hierarchy(root, relation)

        print(f"\n{'=' * 60}")
        print(f"–Ü—î—Ä–∞—Ä—Ö—ñ—è '{relation}' –¥–ª—è: {root}")
        print('=' * 60)

        for level, item in hierarchy:
            indent = "  " * level
            if level == 0:
                print(f"{indent}üìå {item}")
            else:
                print(f"{indent}‚îî‚îÄ {item}")

    def remove_fact(self, subject, relation, obj):
        """–í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–∫—Ç –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
        if subject not in self.vertices:
            return False, f"‚ùå –í–µ—Ä—à–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {subject}"

        subject_vertex = self.vertices[subject]

        # –®—É–∫–∞—î–º–æ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ —Ä–µ–±—Ä–æ
        for i, edge in enumerate(subject_vertex.edges):
            if edge.relation == relation and edge.target.name == obj:
                del subject_vertex.edges[i]
                return True, f"‚úÖ –§–∞–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ: {subject} --[{relation}]--> {obj}"

        return False, f"‚ùå –§–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {subject} --[{relation}]--> {obj}"

    def list_all_entities(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π"""
        return sorted(self.vertices.keys())

    def list_all_relations(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –≤—ñ–¥–Ω–æ—à–µ–Ω—å"""
        return sorted(self.relation_types)

    def find_by_relation(self, relation):
        """–ó–Ω–∞–π—Ç–∏ –≤—Å—ñ —Ñ–∞–∫—Ç–∏ –∑ –ø–µ–≤–Ω–∏–º —Ç–∏–ø–æ–º –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è"""
        results = []
        for vertex_name, vertex in self.vertices.items():
            for edge in vertex.edges:
                if edge.relation == relation:
                    results.append((vertex_name, edge.target.name))
        return results

    def export_facts(self, filename="kb_export.txt"):
        """–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –±–∞–∑—É –∑–Ω–∞–Ω—å —É —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                for vertex_name, vertex in sorted(self.vertices.items()):
                    for edge in vertex.edges:
                        f.write(f"{vertex_name},{edge.relation},{edge.target.name}\n")
            return True, f"‚úÖ –ë–∞–∑–∞ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞ –≤ {filename}"
        except Exception as e:
            return False, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}"

    def import_facts(self, filename="kb_export.txt"):
        """–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –±–∞–∑—É –∑–Ω–∞–Ω—å –∑ —Ñ–∞–π–ª—É"""
        try:
            count = 0
            with open(filename, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        parts = line.split(',')
                        if len(parts) == 3:
                            self.add_fact(parts[0], parts[1], parts[2])
                            count += 1
            return True, f"‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {count} —Ñ–∞–∫—Ç—ñ–≤ –∑ {filename}"
        except Exception as e:
            return False, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}"

    def get_statistics(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
        total_vertices = len(self.vertices)
        total_edges = sum(len(vertex.edges) for vertex in self.vertices.values())

        relation_stats = {}
        for vertex in self.vertices.values():
            for edge in vertex.edges:
                relation_stats[edge.relation] = relation_stats.get(edge.relation, 0) + 1

        return {
            'vertices': total_vertices,
            'edges': total_edges,
            'relations': relation_stats
        }


def create_optimized_weapon_kb():
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—ó –±–∞–∑–∏ –∑–Ω–∞–Ω—å –ø—Ä–æ –∑–±—Ä–æ—é
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç—É —Å–∞–º—É –ª–æ–≥—ñ–∫—É, –∞–ª–µ –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –¥–∞–Ω–∏—Ö
    """
    kb = OptimizedKnowledgeBase()
    # ============================================================
    # –Ü–Ñ–†–ê–†–•–Ü–Ø IS_A - –†–Ü–í–ù–û 4 –†–Ü–í–ù–Ü
    # ============================================================

    # –†–Ü–í–ï–ù–¨ 1: –ù–∞–π–≤–∏—â–∏–π - –ó–±—Ä–æ—è
    kb.add_fact("Weapon", "is_a", "Item")

    # –†–Ü–í–ï–ù–¨ 2: –û—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ —Ç–∏–ø–æ–º –±–æ—é
    kb.add_fact("MeleeWeapon", "is_a", "Weapon")
    kb.add_fact("RangedWeapon", "is_a", "Weapon")
    kb.add_fact("ExplosiveWeapon", "is_a", "Weapon")

    # –†–Ü–í–ï–ù–¨ 3: –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    # –•–æ–ª–æ–¥–Ω–∞ –∑–±—Ä–æ—è
    kb.add_fact("Sword", "is_a", "MeleeWeapon")
    kb.add_fact("Axe", "is_a", "MeleeWeapon")
    kb.add_fact("Spear", "is_a", "MeleeWeapon")
    kb.add_fact("Dagger", "is_a", "MeleeWeapon")
    kb.add_fact("Mace", "is_a", "MeleeWeapon")
    kb.add_fact("Staff", "is_a", "MeleeWeapon")

    # –î–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–∞ –∑–±—Ä–æ—è
    kb.add_fact("Bow", "is_a", "RangedWeapon")
    kb.add_fact("Crossbow", "is_a", "RangedWeapon")
    kb.add_fact("Firearm", "is_a", "RangedWeapon")
    kb.add_fact("Throwable", "is_a", "RangedWeapon")

    # –í–∏–±—É—Ö—ñ–≤–∫–∞
    kb.add_fact("Grenade", "is_a", "ExplosiveWeapon")
    kb.add_fact("Mine", "is_a", "ExplosiveWeapon")
    kb.add_fact("Bomb", "is_a", "ExplosiveWeapon")
    kb.add_fact("Grenade", "is_a", "Throwable")
    kb.add_fact("Bomb", "is_a", "Throwable")

    # –†–Ü–í–ï–ù–¨ 4: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –≤–∏–¥–∏
    # –ú–µ—á—ñ
    kb.add_fact("Longsword", "is_a", "Sword")
    kb.add_fact("Katana", "is_a", "Sword")
    kb.add_fact("Rapier", "is_a", "Sword")
    kb.add_fact("Scimitar", "is_a", "Sword")
    kb.add_fact("Claymore", "is_a", "Sword")
    kb.add_fact("Shortsword", "is_a", "Sword")

    # –°–æ–∫–∏—Ä–∏
    kb.add_fact("BattleAxe", "is_a", "Axe")
    kb.add_fact("Hatchet", "is_a", "Axe")
    kb.add_fact("Tomahawk", "is_a", "Axe")
    kb.add_fact("Halberd", "is_a", "Axe")

    # –°–ø–∏—Å–∏
    kb.add_fact("Pike", "is_a", "Spear")
    kb.add_fact("Javelin", "is_a", "Spear")
    kb.add_fact("Lance", "is_a", "Spear")
    kb.add_fact("Trident", "is_a", "Spear")

    # –ö–∏–Ω–¥–∂–∞–ª–∏
    kb.add_fact("Stiletto", "is_a", "Dagger")
    kb.add_fact("Dirk", "is_a", "Dagger")
    kb.add_fact("Tanto", "is_a", "Dagger")

    # –õ—É–∫–∏
    kb.add_fact("Longbow", "is_a", "Bow")
    kb.add_fact("Shortbow", "is_a", "Bow")
    kb.add_fact("CompositeBow", "is_a", "Bow")
    kb.add_fact("Recurve", "is_a", "Bow")

    # –í–æ–≥–Ω–µ–ø–∞–ª—å–Ω–∞ –∑–±—Ä–æ—è
    kb.add_fact("Pistol", "is_a", "Firearm")
    kb.add_fact("Rifle", "is_a", "Firearm")
    kb.add_fact("Shotgun", "is_a", "Firearm")
    kb.add_fact("MachineGun", "is_a", "Firearm")

    # –ú–µ—Ç–∞–ª—å–Ω–∞ –∑–±—Ä–æ—è
    kb.add_fact("Shuriken", "is_a", "Throwable")
    kb.add_fact("ThrowingKnife", "is_a", "Throwable")
    kb.add_fact("Boomerang", "is_a", "Throwable")
    kb.add_fact("Chakram", "is_a", "Throwable")

    # ============================================================
    # –ö–û–ú–ü–û–ù–ï–ù–¢–ò –ó–ë–†–û–á (–¥–ª—è –∑–≤'—è–∑–∫—ñ–≤ part_of/has)
    # ============================================================

    # –ë–∞–∑–æ–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("Component", "is_a", "Item")
    kb.add_fact("Blade", "is_a", "Component")
    kb.add_fact("Handle", "is_a", "Component")
    kb.add_fact("Guard", "is_a", "Component")
    kb.add_fact("Pommel", "is_a", "Component")
    kb.add_fact("String", "is_a", "Component")
    kb.add_fact("Trigger", "is_a", "Component")
    kb.add_fact("Barrel", "is_a", "Component")
    kb.add_fact("Sight", "is_a", "Component")
    kb.add_fact("Magazine", "is_a", "Component")

    # –¢–∏–ø–∏ –ª–µ–∑
    kb.add_fact("StraightBlade", "is_a", "Blade")
    kb.add_fact("CurvedBlade", "is_a", "Blade")
    kb.add_fact("SerratedBlade", "is_a", "Blade")

    # –¢–∏–ø–∏ —Ä—É–∫–æ—è—Ç–æ–∫
    kb.add_fact("WoodenHandle", "is_a", "Handle")
    kb.add_fact("MetalHandle", "is_a", "Handle")
    kb.add_fact("LeatherHandle", "is_a", "Handle")

    # ============================================================
    # –î–í–û–°–¢–û–†–û–ù–ù–Ü –ó–í'–Ø–ó–ö–ò: –ú–ï–ß–Ü –¢–ê –á–• –ö–û–ú–ü–û–ù–ï–ù–¢–ò
    # ============================================================

    # Longsword –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("StraightBlade", "part_of", "Longsword")
    kb.add_fact("Longsword", "has", "StraightBlade")

    kb.add_fact("MetalHandle", "part_of", "Longsword")
    kb.add_fact("Longsword", "has", "MetalHandle")

    kb.add_fact("Guard", "part_of", "Longsword")
    kb.add_fact("Longsword", "has", "Guard")

    kb.add_fact("Pommel", "part_of", "Longsword")
    kb.add_fact("Longsword", "has", "Pommel")

    # Katana –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("CurvedBlade", "part_of", "Katana")
    kb.add_fact("Katana", "has", "CurvedBlade")

    kb.add_fact("WoodenHandle", "part_of", "Katana")
    kb.add_fact("Katana", "has", "WoodenHandle")

    kb.add_fact("Guard", "part_of", "Katana")
    kb.add_fact("Katana", "has", "Guard")

    # Rapier –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("StraightBlade", "part_of", "Rapier")
    kb.add_fact("Rapier", "has", "StraightBlade")

    kb.add_fact("MetalHandle", "part_of", "Rapier")
    kb.add_fact("Rapier", "has", "MetalHandle")

    kb.add_fact("Guard", "part_of", "Rapier")
    kb.add_fact("Rapier", "has", "Guard")

    # Scimitar –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("CurvedBlade", "part_of", "Scimitar")
    kb.add_fact("Scimitar", "has", "CurvedBlade")

    kb.add_fact("MetalHandle", "part_of", "Scimitar")
    kb.add_fact("Scimitar", "has", "MetalHandle")

    # Dagger –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    kb.add_fact("StraightBlade", "part_of", "Stiletto")
    kb.add_fact("Stiletto", "has", "StraightBlade")

    kb.add_fact("MetalHandle", "part_of", "Stiletto")
    kb.add_fact("Stiletto", "has", "MetalHandle")

    # ============================================================
    # –î–í–û–°–¢–û–†–û–ù–ù–Ü –ó–í'–Ø–ó–ö–ò: –õ–£–ö–ò –¢–ê –á–• –ö–û–ú–ü–û–ù–ï–ù–¢–ò
    # ============================================================

    # Longbow
    kb.add_fact("String", "part_of", "Longbow")
    kb.add_fact("Longbow", "has", "String")

    kb.add_fact("WoodenHandle", "part_of", "Longbow")
    kb.add_fact("Longbow", "has", "WoodenHandle")

    # Crossbow
    kb.add_fact("String", "part_of", "Crossbow")
    kb.add_fact("Crossbow", "has", "String")

    kb.add_fact("Trigger", "part_of", "Crossbow")
    kb.add_fact("Crossbow", "has", "Trigger")

    kb.add_fact("WoodenHandle", "part_of", "Crossbow")
    kb.add_fact("Crossbow", "has", "WoodenHandle")

    # ============================================================
    # –î–í–û–°–¢–û–†–û–ù–ù–Ü –ó–í'–Ø–ó–ö–ò: –í–û–ì–ù–ï–ü–ê–õ–¨–ù–ê –ó–ë–†–û–Ø
    # ============================================================

    # Pistol
    kb.add_fact("Barrel", "part_of", "Pistol")
    kb.add_fact("Pistol", "has", "Barrel")

    kb.add_fact("Trigger", "part_of", "Pistol")
    kb.add_fact("Pistol", "has", "Trigger")

    kb.add_fact("MetalHandle", "part_of", "Pistol")
    kb.add_fact("Pistol", "has", "MetalHandle")

    kb.add_fact("Magazine", "part_of", "Pistol")
    kb.add_fact("Pistol", "has", "Magazine")

    # Rifle
    kb.add_fact("Barrel", "part_of", "Rifle")
    kb.add_fact("Rifle", "has", "Barrel")

    kb.add_fact("Trigger", "part_of", "Rifle")
    kb.add_fact("Rifle", "has", "Trigger")

    kb.add_fact("WoodenHandle", "part_of", "Rifle")
    kb.add_fact("Rifle", "has", "WoodenHandle")

    kb.add_fact("Sight", "part_of", "Rifle")
    kb.add_fact("Rifle", "has", "Sight")

    kb.add_fact("Magazine", "part_of", "Rifle")
    kb.add_fact("Rifle", "has", "Magazine")

    # Shotgun
    kb.add_fact("Barrel", "part_of", "Shotgun")
    kb.add_fact("Shotgun", "has", "Barrel")

    kb.add_fact("Trigger", "part_of", "Shotgun")
    kb.add_fact("Shotgun", "has", "Trigger")

    kb.add_fact("WoodenHandle", "part_of", "Shotgun")
    kb.add_fact("Shotgun", "has", "WoodenHandle")

    # ============================================================
    # –ú–ê–¢–ï–†–Ü–ê–õ–ò
    # ============================================================

    kb.add_fact("Material", "is_a", "Item")
    kb.add_fact("Metal", "is_a", "Material")
    kb.add_fact("Wood", "is_a", "Material")
    kb.add_fact("Leather", "is_a", "Material")
    kb.add_fact("Plastic", "is_a", "Material")

    # –¢–∏–ø–∏ –º–µ—Ç–∞–ª—ñ–≤
    kb.add_fact("Steel", "is_a", "Metal")
    kb.add_fact("Iron", "is_a", "Metal")
    kb.add_fact("Bronze", "is_a", "Metal")
    kb.add_fact("Silver", "is_a", "Metal")
    kb.add_fact("Copper", "is_a", "Metal")
    kb.add_fact("Aluminum", "is_a", "Metal")

    # –í–∏–±—É—Ö–æ–≤—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ - –î–ï–¢–ê–õ–¨–ù–ê –Ü–Ñ–†–ê–†–•–Ü–Ø
    kb.add_fact("ExplosiveMaterial", "is_a", "Material")
    kb.add_fact("HighExplosive", "is_a", "ExplosiveMaterial")
    kb.add_fact("LowExplosive", "is_a", "ExplosiveMaterial")
    kb.add_fact("PrimaryExplosive", "is_a", "ExplosiveMaterial")
    kb.add_fact("SecondaryExplosive", "is_a", "ExplosiveMaterial")

    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –≤–∏–±—É—Ö–æ–≤—ñ —Ä–µ—á–æ–≤–∏–Ω–∏
    kb.add_fact("TNT", "is_a", "HighExplosive")
    kb.add_fact("TNT", "is_a", "SecondaryExplosive")
    kb.add_fact("RDX", "is_a", "HighExplosive")  # Hexogen
    kb.add_fact("RDX", "is_a", "SecondaryExplosive")
    kb.add_fact("PETN", "is_a", "HighExplosive")
    kb.add_fact("CompositionC4", "is_a", "HighExplosive")
    kb.add_fact("Dynamite", "is_a", "HighExplosive")
    kb.add_fact("Gunpowder", "is_a", "LowExplosive")
    kb.add_fact("Nitroglycerin", "is_a", "PrimaryExplosive")
    kb.add_fact("LeadAzide", "is_a", "PrimaryExplosive")

    # –•—ñ–º—ñ—á–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    kb.add_fact("ChemicalElement", "is_a", "Material")
    kb.add_fact("Carbon", "is_a", "ChemicalElement")
    kb.add_fact("Nitrogen", "is_a", "ChemicalElement")
    kb.add_fact("Oxygen", "is_a", "ChemicalElement")
    kb.add_fact("Hydrogen", "is_a", "ChemicalElement")

    # –¢–∏–ø–∏ –¥–µ—Ä–µ–≤–∞
    kb.add_fact("Oak", "is_a", "Wood")
    kb.add_fact("Ash", "is_a", "Wood")
    kb.add_fact("Yew", "is_a", "Wood")

    # TNT —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ —Ö—ñ–º—ñ—á–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    kb.add_fact("Nitrogen", "part_of", "TNT")
    kb.add_fact("TNT", "has", "Nitrogen")
    kb.add_fact("Oxygen", "part_of", "TNT")
    kb.add_fact("TNT", "has", "Oxygen")
    kb.add_fact("Hydrogen", "part_of", "TNT")
    kb.add_fact("TNT", "has", "Hydrogen")

    # RDX (Hexogen) —Ç–∞–∫–æ–∂ –º–∞—î —Å—Ö–æ–∂–∏–π —Å–∫–ª–∞–¥
    kb.add_fact("Nitrogen", "part_of", "RDX")
    kb.add_fact("RDX", "has", "Nitrogen")
    kb.add_fact("Oxygen", "part_of", "RDX")
    kb.add_fact("RDX", "has", "Oxygen")
    kb.add_fact("Hydrogen", "part_of", "RDX")
    kb.add_fact("RDX", "has", "Hydrogen")

    # –ü–æ—Ä–æ—Ö —Ç–∞–∫–æ–∂ –º–∞—î —Ü—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    kb.add_fact("Nitrogen", "part_of", "Gunpowder")
    kb.add_fact("Gunpowder", "has", "Nitrogen")
    kb.add_fact("Oxygen", "part_of", "Gunpowder")
    kb.add_fact("Gunpowder", "has", "Oxygen")

    # –°—Ç–∞–ª—å —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –∑–∞–ª—ñ–∑–∞ —Ç–∞ –≤—É–≥–ª–µ—Ü—é
    kb.add_fact("Iron", "part_of", "Steel")
    kb.add_fact("Steel", "has", "Iron")
    kb.add_fact("Carbon", "part_of", "Steel")
    kb.add_fact("Steel", "has", "Carbon")

    # –ì—Ä–∞–Ω–∞—Ç–∞ –º—ñ—Å—Ç–∏—Ç—å TNT
    kb.add_fact("TNT", "part_of", "Grenade")
    kb.add_fact("Grenade", "has", "TNT")

    # –ë–æ–º–±–∞ –º—ñ—Å—Ç–∏—Ç—å RDX (Composition C4)
    kb.add_fact("RDX", "part_of", "Bomb")
    kb.add_fact("Bomb", "has", "RDX")
    kb.add_fact("CompositionC4", "part_of", "Bomb")
    kb.add_fact("Bomb", "has", "CompositionC4")

    # –ì–≤–∏–Ω—Ç—ñ–≤–∫–∞ –º—ñ—Å—Ç–∏—Ç—å —Å—Ç–∞–ª—å —Ç–∞ –ø–æ—Ä–æ—Ö
    kb.add_fact("Steel", "part_of", "Rifle")
    kb.add_fact("Rifle", "has", "Steel")

    kb.add_fact("Casing", "part_of", "Grenade")
    kb.add_fact("Grenade", "has", "Casing")
    kb.add_fact("Casing", "part_of", "Bomb")
    kb.add_fact("Bomb", "has", "Casing")

    # ============================================================
    # –î–í–û–°–¢–û–†–û–ù–ù–Ü –ó–í'–Ø–ó–ö–ò: –ö–û–ú–ü–û–ù–ï–ù–¢–ò –¢–ê –ú–ê–¢–ï–†–Ü–ê–õ–ò
    # ============================================================

    # StraightBlade –∑—Ä–æ–±–ª–µ–Ω–æ –∑—ñ —Å—Ç–∞–ª—ñ
    kb.add_fact("Steel", "part_of", "StraightBlade")
    kb.add_fact("StraightBlade", "has", "Steel")

    # CurvedBlade –∑—ñ —Å—Ç–∞–ª—ñ
    kb.add_fact("Steel", "part_of", "CurvedBlade")
    kb.add_fact("CurvedBlade", "has", "Steel")

    # MetalHandle –∑ –∑–∞–ª—ñ–∑–∞
    kb.add_fact("Iron", "part_of", "MetalHandle")
    kb.add_fact("MetalHandle", "has", "Iron")

    # WoodenHandle –∑ –¥—É–±–∞
    kb.add_fact("Oak", "part_of", "WoodenHandle")
    kb.add_fact("WoodenHandle", "has", "Oak")

    # LeatherHandle –∑—ñ —à–∫—ñ—Ä–∏
    kb.add_fact("Leather", "part_of", "LeatherHandle")
    kb.add_fact("LeatherHandle", "has", "Leather")

    # Barrel –∑—ñ —Å—Ç–∞–ª—ñ
    kb.add_fact("Steel", "part_of", "Barrel")
    kb.add_fact("Barrel", "has", "Steel")

    # String (—Ç—è—Ç–∏–≤–∞)
    kb.add_fact("Leather", "part_of", "String")
    kb.add_fact("String", "has", "Leather")

    # ============================================================
    # –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ó–ë–†–û–á
    # ============================================================

    kb.add_fact("Property", "is_a", "Item")
    kb.add_fact("Weight", "is_a", "Property")
    kb.add_fact("Length", "is_a", "Property")
    kb.add_fact("Damage", "is_a", "Property")
    kb.add_fact("Range", "is_a", "Property")
    kb.add_fact("Speed", "is_a", "Property")

    # –ó–Ω–∞—á–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    kb.add_fact("Heavy", "is_a", "Weight")
    kb.add_fact("Light", "is_a", "Weight")
    kb.add_fact("Medium", "is_a", "Weight")

    # –°–ø—ñ–ª—å–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
    kb.add_fact("ExplosiveMaterial", "has", "ExplosiveProperty")
    kb.add_fact("TNT", "has", "HighExplosive")
    kb.add_fact("Hexogen", "has", "VeryHighExplosive")
    kb.add_fact("Gunpowder", "has", "LowExplosive")

    # –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑–±—Ä–æ—ó, —â–æ –ø–æ—Ö–æ–¥—è—Ç—å –≤—ñ–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
    kb.add_fact("Grenade", "has", "ExplosiveDamage")  # –±–æ –º–∞—î TNT
    kb.add_fact("Bomb", "has", "ExplosiveDamage")  # –±–æ –º–∞—î Hexogen
    kb.add_fact("Firearm", "has", "KineticDamage")  # –±–æ –º–∞—î Gunpowder


    # –î–µ—Ç–æ–Ω–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å —É —Ä—ñ–∑–Ω–∏—Ö –≤–∏–±—É—Ö–æ–≤–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö
    kb.add_fact("Detonator", "part_of", "Bomb")
    kb.add_fact("Bomb", "has", "Detonator")
    kb.add_fact("Detonator", "part_of", "Mine")
    kb.add_fact("Mine", "has", "Detonator")

    kb.add_fact("Long", "is_a", "Length")
    kb.add_fact("Short", "is_a", "Length")

    kb.add_fact("HighDamage", "is_a", "Damage")
    kb.add_fact("MediumDamage", "is_a", "Damage")
    kb.add_fact("LowDamage", "is_a", "Damage")

    kb.add_fact("LongRange", "is_a", "Range")
    kb.add_fact("ShortRange", "is_a", "Range")

    kb.add_fact("Fast", "is_a", "Speed")
    kb.add_fact("Slow", "is_a", "Speed")

    # ============================================================
    # –î–í–û–°–¢–û–†–û–ù–ù–Ü –ó–í'–Ø–ó–ö–ò: –ó–ë–†–û–Ø –¢–ê –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
    # ============================================================

    # Longsword
    kb.add_fact("Longsword", "has", "Heavy")
    kb.add_fact("Longsword", "has", "Long")
    kb.add_fact("Longsword", "has", "HighDamage")
    kb.add_fact("Longsword", "has", "Slow")

    # Katana
    kb.add_fact("Katana", "has", "Medium")
    kb.add_fact("Katana", "has", "Long")
    kb.add_fact("Katana", "has", "HighDamage")
    kb.add_fact("Katana", "has", "Fast")

    # Rapier
    kb.add_fact("Rapier", "has", "Light")
    kb.add_fact("Rapier", "has", "Long")
    kb.add_fact("Rapier", "has", "MediumDamage")
    kb.add_fact("Rapier", "has", "Fast")

    # Stiletto
    kb.add_fact("Stiletto", "has", "Light")
    kb.add_fact("Stiletto", "has", "Short")
    kb.add_fact("Stiletto", "has", "MediumDamage")
    kb.add_fact("Stiletto", "has", "Fast")

    # BattleAxe
    kb.add_fact("BattleAxe", "has", "Heavy")
    kb.add_fact("BattleAxe", "has", "Long")
    kb.add_fact("BattleAxe", "has", "HighDamage")
    kb.add_fact("BattleAxe", "has", "Slow")

    # Longbow
    kb.add_fact("Longbow", "has", "Medium")
    kb.add_fact("Longbow", "has", "Long")
    kb.add_fact("Longbow", "has", "MediumDamage")
    kb.add_fact("Longbow", "has", "LongRange")

    # Pistol
    kb.add_fact("Pistol", "has", "Light")
    kb.add_fact("Pistol", "has", "Short")
    kb.add_fact("Pistol", "has", "MediumDamage")
    kb.add_fact("Pistol", "has", "ShortRange")
    kb.add_fact("Pistol", "has", "Fast")

    # Rifle
    kb.add_fact("Rifle", "has", "Medium")
    kb.add_fact("Rifle", "has", "Long")
    kb.add_fact("Rifle", "has", "HighDamage")
    kb.add_fact("Rifle", "has", "LongRange")

    # ============================================================
    # –Ü–°–¢–û–†–ò–ß–ù–Ü –ü–ï–†–Ü–û–î–ò (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É)
    # ============================================================

    kb.add_fact("Period", "is_a", "Item")
    kb.add_fact("Medieval", "is_a", "Period")
    kb.add_fact("Renaissance", "is_a", "Period")
    kb.add_fact("Feudal", "is_a", "Period")
    kb.add_fact("Modern", "is_a", "Period")

    # –ó–±—Ä–æ—è –º–∞—î —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
    kb.add_fact("Longsword", "has", "Medieval")
    kb.add_fact("Claymore", "has", "Medieval")
    kb.add_fact("BattleAxe", "has", "Medieval")

    kb.add_fact("Rapier", "has", "Renaissance")

    kb.add_fact("Katana", "has", "Feudal")
    kb.add_fact("Tanto", "has", "Feudal")

    kb.add_fact("Pistol", "has", "Modern")
    kb.add_fact("Rifle", "has", "Modern")
    kb.add_fact("Shotgun", "has", "Modern")

    # ============================================================
    # –°–¢–ò–õ–Ü –ë–û–Æ
    # ============================================================

    kb.add_fact("CombatStyle", "is_a", "Item")
    kb.add_fact("Dueling", "is_a", "CombatStyle")
    kb.add_fact("HeavyStrike", "is_a", "CombatStyle")
    kb.add_fact("QuickAttack", "is_a", "CombatStyle")
    kb.add_fact("Archery", "is_a", "CombatStyle")
    kb.add_fact("Tactical", "is_a", "CombatStyle")

    # –ó–±—Ä–æ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ–≤–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤
    kb.add_fact("Rapier", "has", "Dueling")
    kb.add_fact("Longsword", "has", "HeavyStrike")
    kb.add_fact("Katana", "has", "QuickAttack")
    kb.add_fact("Stiletto", "has", "QuickAttack")
    kb.add_fact("Longbow", "has", "Archery")
    kb.add_fact("Rifle", "has", "Tactical")

    # ============================================================
    # –ü–ï–†–ï–•–†–ï–°–ù–Ü –ó–í'–Ø–ó–ö–ò (—â–æ–± —Ä—ñ–∑–Ω—ñ –≤–∏–¥–∏ –∑–±—Ä–æ—ó –±—É–ª–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ)
    # ============================================================

    # –ó–±—Ä–æ—è –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    # Guard –ø–æ–≤'—è–∑—É—î –º–µ—á—ñ
    kb.add_fact("Guard", "part_of", "Sword")
    kb.add_fact("Sword", "has", "Guard")

    # Trigger –ø–æ–≤'—è–∑—É—î –≤–æ–≥–Ω–µ–ø–∞–ª—å–Ω—É –∑–±—Ä–æ—é —Ç–∞ –∞—Ä–±–∞–ª–µ—Ç
    kb.add_fact("Trigger", "part_of", "Firearm")
    kb.add_fact("Firearm", "has", "Trigger")

    # String –ø–æ–≤'—è–∑—É—î –ª—É–∫–∏
    kb.add_fact("String", "part_of", "Bow")
    kb.add_fact("Bow", "has", "String")

    # Steel - —Å–ø—ñ–ª—å–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö –∫–ª–∏–Ω–∫—ñ–≤
    kb.add_fact("Steel", "part_of", "Blade")
    kb.add_fact("Blade", "has", "Steel")

    return kb


def optimized_interactive_query(kb):
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—ó –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
    print("\n" + "=" * 60)
    print("‚ö° –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –ë–ê–ó–ê –ó–ù–ê–ù–¨: –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø –ó–ë–†–û–á ‚ö°")
    print("=" * 60)
    print("\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
    print("  1. query <–æ–±'—î–∫—Ç1> <–æ–±'—î–∫—Ç2> - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–≤'—è–∑–æ–∫")
    print("  2. relations <–æ–±'—î–∫—Ç> - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–≤'—è–∑–∫–∏ –æ–±'—î–∫—Ç–∞")
    print("  3. hierarchy <–æ–±'—î–∫—Ç> [–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è] - –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—é")
    print("  4. add <—Å—É–±'—î–∫—Ç> <–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è> <–æ–±'—î–∫—Ç> - –¥–æ–¥–∞—Ç–∏ —Ñ–∞–∫—Ç")
    print("  5. remove <—Å—É–±'—î–∫—Ç> <–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è> <–æ–±'—î–∫—Ç> - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–∫—Ç")
    print("  6. list entities - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ")
    print("  7. list relations - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–∏–ø–∏ –≤—ñ–¥–Ω–æ—à–µ–Ω—å")
    print("  8. find <–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è> - –∑–Ω–∞–π—Ç–∏ –≤—Å—ñ —Ñ–∞–∫—Ç–∏ –∑ —Ü–∏–º –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º")
    print("  9. stats - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print(" 10. exit - –≤–∏—Ö—ñ–¥")
    print("=" * 60)

    while True:
        try:
            user_input = input("\nüí¨ –ó–∞–ø–∏—Ç: ").strip()
            if not user_input:
                continue

            parts = user_input.split()
            command = parts[0].lower()

            if command == "exit":
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break

            elif command == "query" and len(parts) >= 3:
                obj1, obj2 = parts[1], parts[2]
                found, path = kb.query_transitive(obj1, obj2)

                if found:
                    print(f"\n‚úÖ –¢–ê–ö! '{obj1}' –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ '{obj2}'")
                    print(f"\nüîó –®–ª—è—Ö –∑–≤'—è–∑–∫—É ({len(path)} –∫—Ä–æ–∫—ñ–≤):")
                    for i, (s, rel, o) in enumerate(path, 1):
                        print(f"   {i}. {s} --[{rel}]--> {o}")
                else:
                    print(f"\n‚ùå –ù–Ü. '{obj1}' –ù–ï –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ '{obj2}'")

            elif command == "relations" and len(parts) >= 2:
                obj = parts[1]
                relations = kb.get_all_relations(obj)
                if relations:
                    print(f"\nüìã –í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–ª—è '{obj}':")
                    for rel, target in relations:
                        print(f"   ‚Ä¢ {obj} --[{rel}]--> {target}")
                else:
                    print(f"\n‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–Ω–æ—à–µ–Ω—å –¥–ª—è '{obj}'")

            elif command == "hierarchy" and len(parts) >= 2:
                obj = parts[1]
                relation = parts[2] if len(parts) >= 3 else "is_a"
                kb.print_hierarchy(obj, relation)

            elif command == "add" and len(parts) >= 4:
                subject, relation, obj = parts[1], parts[2], parts[3]
                success, message = kb.add_fact(subject, relation, obj)
                print(f"\n{message}")

            elif command == "remove" and len(parts) >= 4:
                subject, relation, obj = parts[1], parts[2], parts[3]
                success, message = kb.remove_fact(subject, relation, obj)
                print(f"\n{message}")

            elif command == "list" and len(parts) >= 2:
                subcommand = parts[1].lower()
                if subcommand == "entities":
                    entities = kb.list_all_entities()
                    print(f"\nüì¶ –í—Å—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ ({len(entities)}):")
                    for i in range(0, len(entities), 4):
                        row = entities[i:i + 4]
                        print("  ".join(f"{ent:20}" for ent in row))
                elif subcommand == "relations":
                    relations = kb.list_all_relations()
                    print(f"\nüîó –¢–∏–ø–∏ –≤—ñ–¥–Ω–æ—à–µ–Ω—å ({len(relations)}):")
                    for rel in relations:
                        count = len(kb.find_by_relation(rel))
                        print(f"   ‚Ä¢ {rel}: {count} —Ñ–∞–∫—Ç—ñ–≤")

            elif command == "find" and len(parts) >= 2:
                relation = parts[1]
                results = kb.find_by_relation(relation)
                if results:
                    print(f"\nüîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ñ–∞–∫—Ç—ñ–≤ –∑ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º '{relation}':")
                    for s, o in results:
                        print(f"   ‚Ä¢ {s} --[{relation}]--> {o}")
                else:
                    print(f"\n‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–∫—Ç—ñ–≤ –∑ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º '{relation}'")

            elif command == "stats":
                stats = kb.get_statistics()
                print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–ò:")
                print(f"   –í–µ—Ä—à–∏–Ω: {stats['vertices']}")
                print(f"   –†–µ–±–µ—Ä: {stats['edges']}")
                print(f"   –©—ñ–ª—å–Ω—ñ—Å—Ç—å –≥—Ä–∞—Ñ–∞: {stats['edges'] / stats['vertices']:.2f} —Ä–µ–±–µ—Ä/–≤–µ—Ä—à–∏–Ω—É")
                print(f"\nüìà –†–æ–∑–ø–æ–¥—ñ–ª –≤—ñ–¥–Ω–æ—à–µ–Ω—å:")
                for rel, count in sorted(stats['relations'].items(), key=lambda x: x[1], reverse=True):
                    bar = "‚ñà" * min(count // 3, 20)  # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    print(f"   {rel:15} | {bar} {count}")

            else:
                print("\n‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ: query, relations, hierarchy, add, remove, list, find, stats")

        except KeyboardInterrupt:
            print("\n\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—É –±–∞–∑—É –∑–Ω–∞–Ω—å
    kb = create_optimized_weapon_kb()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    optimized_interactive_query(kb)